
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 11 09:13:09 CEST 2017
//----------------------------------------------------

package rs.ac.bg.etf.ma120261d_pp1;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayDeque;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;
import rs.etf.pp1.mj.runtime.Code;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 11 09:13:09 CEST 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\013\010\000\002\002\004\000\002\061" +
    "\003\000\002\022\004\000\002\022\002\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\015\004\000" +
    "\002\015\002\000\002\016\007\000\002\016\003\000\002" +
    "\047\004\000\002\047\002\000\002\027\006\000\002\027" +
    "\004\000\002\027\002\000\002\040\003\000\002\020\007" +
    "\000\002\026\005\000\002\026\002\000\002\031\005\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\021\011\000\002\030\005\000\002\030\002\000\002\036" +
    "\004\000\002\036\002\000\002\014\004\000\002\014\002" +
    "\000\002\064\002\000\002\065\002\000\002\017\016\000" +
    "\002\037\003\000\002\037\002\000\002\044\003\000\002" +
    "\044\003\000\002\033\003\000\002\033\002\000\002\057" +
    "\005\000\002\057\003\000\002\060\005\000\002\024\004" +
    "\000\002\024\002\000\002\025\003\000\002\025\003\000" +
    "\002\002\007\000\002\002\011\000\002\002\013\000\002" +
    "\003\004\000\002\003\013\000\002\003\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\005" +
    "\000\002\003\004\000\002\003\011\000\002\003\005\000" +
    "\002\011\003\000\002\011\002\000\002\066\002\000\002" +
    "\007\006\000\002\007\005\000\002\007\006\000\002\007" +
    "\004\000\002\007\004\000\002\012\003\000\002\012\002" +
    "\000\002\005\005\000\002\005\003\000\002\004\005\000" +
    "\002\004\003\000\002\006\005\000\002\006\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\045\003" +
    "\000\002\045\005\000\002\042\004\000\002\042\003\000" +
    "\002\067\002\000\002\070\002\000\002\046\007\000\002" +
    "\046\003\000\002\010\005\000\002\010\002\000\002\071" +
    "\002\000\002\072\002\000\002\041\007\000\002\041\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\043\006\000\002\034\003\000\002\034\002\000\002\035" +
    "\005\000\002\035\003\000\002\062\005\000\002\073\002" +
    "\000\002\062\007\000\002\062\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\005\001\002\000\004\002\322\001" +
    "\002\000\004\062\006\001\002\000\014\003\uffff\005\uffff" +
    "\023\uffff\024\uffff\062\uffff\001\002\000\014\003\ufffd\005" +
    "\ufffd\023\ufffd\024\ufffd\062\ufffd\001\002\000\014\003\017" +
    "\005\012\023\021\024\022\062\013\001\002\000\004\062" +
    "\312\001\002\000\012\006\uffe2\017\uffe2\032\uffe2\062\uffe2" +
    "\001\002\000\064\005\ufff0\007\ufff0\011\ufff0\012\ufff0\015" +
    "\ufff0\020\ufff0\021\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\062\ufff0\001\002\000\014\003\ufffb\005\ufffb\023\ufffb\024" +
    "\ufffb\062\ufffb\001\002\000\014\003\ufffa\005\ufffa\023\ufffa" +
    "\024\ufffa\062\ufffa\001\002\000\014\003\ufffe\005\ufffe\023" +
    "\ufffe\024\ufffe\062\ufffe\001\002\000\016\003\ufff6\005\ufff6" +
    "\006\ufff6\023\ufff6\024\ufff6\062\ufff6\001\002\000\014\003" +
    "\ufffc\005\ufffc\023\ufffc\024\ufffc\062\ufffc\001\002\000\004" +
    "\062\037\001\002\000\004\062\013\001\002\000\004\062" +
    "\024\001\002\000\004\016\032\001\002\000\006\007\uffed" +
    "\012\uffed\001\002\000\006\007\030\012\027\001\002\000" +
    "\004\062\024\001\002\000\014\003\uffef\005\uffef\023\uffef" +
    "\024\uffef\062\uffef\001\002\000\006\007\uffee\012\uffee\001" +
    "\002\000\010\057\036\060\035\061\034\001\002\000\006" +
    "\007\uffec\012\uffec\001\002\000\006\007\uffeb\012\uffeb\001" +
    "\002\000\006\007\uffe9\012\uffe9\001\002\000\006\007\uffea" +
    "\012\uffea\001\002\000\006\005\uffe4\030\040\001\002\000" +
    "\004\062\013\001\002\000\004\005\042\001\002\000\012" +
    "\003\ufff8\005\ufff8\006\ufff8\062\ufff8\001\002\000\012\003" +
    "\017\005\044\006\uffe6\062\013\001\002\000\012\006\uffe2" +
    "\017\uffe2\032\uffe2\062\uffe2\001\002\000\012\003\ufff9\005" +
    "\ufff9\006\ufff9\062\ufff9\001\002\000\004\006\047\001\002" +
    "\000\014\003\uffe8\005\uffe8\023\uffe8\024\uffe8\062\uffe8\001" +
    "\002\000\012\006\052\017\uffdd\032\051\062\uffdd\001\002" +
    "\000\006\017\uffde\062\uffde\001\002\000\004\006\uffe7\001" +
    "\002\000\012\006\uffe3\017\uffe3\032\uffe3\062\uffe3\001\002" +
    "\000\006\017\056\062\013\001\002\000\004\062\uffdc\001" +
    "\002\000\004\062\uffdb\001\002\000\004\062\060\001\002" +
    "\000\004\010\uffe1\001\002\000\004\010\062\001\002\000" +
    "\006\011\uffd9\062\013\001\002\000\004\062\303\001\002" +
    "\000\006\011\uffda\012\301\001\002\000\004\011\067\001" +
    "\002\000\006\011\uffd7\012\uffd7\001\002\000\010\003\ufff8" +
    "\005\ufff8\062\ufff8\001\002\000\010\003\017\005\071\062" +
    "\013\001\002\000\026\005\uffe0\006\uffe0\013\uffe0\014\uffe0" +
    "\022\uffe0\026\uffe0\027\uffe0\031\uffe0\062\uffe0\063\uffe0\001" +
    "\002\000\026\005\uffd4\006\uffd4\013\uffd4\014\uffd4\022\uffd4" +
    "\026\uffd4\027\uffd4\031\uffd4\062\uffd4\063\uffd4\001\002\000" +
    "\026\005\075\006\111\013\105\014\107\022\112\026\074" +
    "\027\077\031\110\062\076\063\102\001\002\000\004\010" +
    "\275\001\002\000\026\005\uffd4\006\uffd4\013\uffd4\014\uffd4" +
    "\022\uffd4\026\uffd4\027\uffd4\031\uffd4\062\uffd4\063\uffd4\001" +
    "\002\000\072\007\uff92\010\uff92\011\uff92\012\uff92\015\uff92" +
    "\016\uff92\020\uff92\021\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\001\002\000\004\010\260" +
    "\001\002\000\026\005\uffd2\006\uffd2\013\uffd2\014\uffd2\022" +
    "\uffd2\026\uffd2\027\uffd2\031\uffd2\062\uffd2\063\uffd2\001\002" +
    "\000\030\010\252\016\247\020\uff94\047\153\050\151\051" +
    "\145\052\141\053\140\054\250\055\251\056\164\001\002" +
    "\000\004\010\215\001\002\000\026\005\uffd5\006\uffd5\013" +
    "\uffd5\014\uffd5\022\uffd5\026\uffd5\027\uffd5\031\uffd5\062\uffd5" +
    "\063\uffd5\001\002\000\004\007\214\001\002\000\004\010" +
    "\210\001\002\000\026\005\uffd3\006\uffd3\013\uffd3\014\uffd3" +
    "\022\uffd3\026\uffd3\027\uffd3\031\uffd3\062\uffd3\063\uffd3\001" +
    "\002\000\022\007\125\010\130\025\121\033\115\057\131" +
    "\060\120\061\124\062\076\001\002\000\004\007\114\001" +
    "\002\000\012\006\uffdf\017\uffdf\032\uffdf\062\uffdf\001\002" +
    "\000\004\007\113\001\002\000\030\005\uffca\006\uffca\013" +
    "\uffca\014\uffca\022\uffca\026\uffca\027\uffca\031\uffca\062\uffca" +
    "\063\uffca\064\uffca\001\002\000\030\005\uffcb\006\uffcb\013" +
    "\uffcb\014\uffcb\022\uffcb\026\uffcb\027\uffcb\031\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\001\002\000\016\010\130\025\121\057" +
    "\131\060\120\061\124\062\076\001\002\000\004\007\206" +
    "\001\002\000\006\007\uffae\012\204\001\002\000\056\007" +
    "\uff9e\011\uff9e\012\uff9e\015\uff9e\021\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\001\002\000\004\062\013\001\002\000" +
    "\064\007\uff9b\010\163\011\uff9b\012\uff9b\015\uff9b\020\uff94" +
    "\021\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\056\164\001" +
    "\002\000\042\007\uffab\011\uffab\012\uffab\015\uffaa\021\uffab" +
    "\033\uffaa\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffaa\050\uffaa\001\002\000\056" +
    "\007\uffa0\011\uffa0\012\uffa0\015\uffa0\021\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\001\002\000\030\005\uffc7\006\uffc7" +
    "\013\uffc7\014\uffc7\022\uffc7\026\uffc7\027\uffc7\031\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\001\002\000\056\007\uffa7\011\uffa7" +
    "\012\uffa7\015\uffa7\021\uffa7\033\uffa7\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa4\052\uffa4\053" +
    "\uffa4\001\002\000\056\007\uffa1\011\uffa1\012\uffa1\015\uffa1" +
    "\021\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\001\002\000" +
    "\020\010\130\025\121\033\115\057\131\060\120\061\124" +
    "\062\076\001\002\000\056\007\uff9f\011\uff9f\012\uff9f\015" +
    "\uff9f\021\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\001\002" +
    "\000\004\011\133\001\002\000\056\007\uff9c\011\uff9c\012" +
    "\uff9c\015\uff9c\021\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\001\002\000\016\034\142\035\137\036\136\051\145\052" +
    "\141\053\140\001\002\000\016\010\uff8b\025\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\001\002\000\016\010\uff84\025" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\001\002\000\016" +
    "\010\uff85\025\uff85\057\uff85\060\uff85\061\uff85\062\uff85\001" +
    "\002\000\022\003\uff87\010\uff87\025\uff87\033\uff87\057\uff87" +
    "\060\uff87\061\uff87\062\uff87\001\002\000\022\003\uff88\010" +
    "\uff88\025\uff88\033\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\001\002\000\016\010\uff86\025\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\001\002\000\016\010\uffa3\025\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\001\002\000\016\010\uff8a\025" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\001\002\000\022" +
    "\003\uff89\010\uff89\025\uff89\033\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\001\002\000\016\010\130\025\121\057\131" +
    "\060\120\061\124\062\076\001\002\000\056\007\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\021\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\001\002\000\012\015\152\033\154\047\153\050" +
    "\151\001\002\000\022\003\uff8e\010\uff8e\025\uff8e\033\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\001\002\000\016\010" +
    "\uff8d\025\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\001\002" +
    "\000\022\003\uff8f\010\uff8f\025\uff8f\033\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\001\002\000\016\010\uff8c\025\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\001\002\000\016\010" +
    "\uff91\025\uff91\057\uff91\060\uff91\061\uff91\062\uff91\001\002" +
    "\000\016\010\uffa9\025\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\001\002\000\016\010\uff90\025\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\001\002\000\016\010\130\025\121\057" +
    "\131\060\120\061\124\062\076\001\002\000\056\007\uffa8" +
    "\011\uffa8\012\uffa8\015\uffa8\021\uffa8\033\uffa8\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa4\052" +
    "\uffa4\053\uffa4\001\002\000\004\020\174\001\002\000\022" +
    "\010\130\011\uff98\025\121\033\115\057\131\060\120\061" +
    "\124\062\076\001\002\000\004\062\165\001\002\000\072" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\015\uff95\016\uff95\020" +
    "\uff95\021\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\055\uff95\056\uff95\001\002\000\004\011\173\001\002\000" +
    "\006\011\uff96\012\uff96\001\002\000\006\011\uff99\012\171" +
    "\001\002\000\020\010\130\025\121\033\115\057\131\060" +
    "\120\061\124\062\076\001\002\000\006\011\uff97\012\uff97" +
    "\001\002\000\056\007\uff9a\011\uff9a\012\uff9a\015\uff9a\021" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\001\002\000\020" +
    "\010\130\025\121\033\115\057\131\060\120\061\124\062" +
    "\076\001\002\000\004\021\176\001\002\000\072\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\015\uff93\016\uff93\020\uff93\021" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93" +
    "\056\uff93\001\002\000\060\007\uffa5\011\uffa5\012\uffa5\015" +
    "\uffa5\020\201\021\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\001\002\000\056\007\uff9d\011\uff9d\012\uff9d\015\uff9d\021" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\001\002\000\020" +
    "\010\130\025\121\033\115\057\131\060\120\061\124\062" +
    "\076\001\002\000\004\021\203\001\002\000\056\007\uffa6" +
    "\011\uffa6\012\uffa6\015\uffa6\021\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\001\002\000\004\061\205\001\002\000\004" +
    "\007\uffad\001\002\000\030\005\uffc8\006\uffc8\013\uffc8\014" +
    "\uffc8\022\uffc8\026\uffc8\027\uffc8\031\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\042\007\uffac\011\uffac\012\uffac\015" +
    "\uffaa\021\uffac\033\uffaa\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffaa\050\uffaa\001" +
    "\002\000\020\010\130\025\121\033\115\057\131\060\120" +
    "\061\124\062\076\001\002\000\004\011\212\001\002\000" +
    "\004\007\213\001\002\000\030\005\uffcc\006\uffcc\013\uffcc" +
    "\014\uffcc\022\uffcc\026\uffcc\027\uffcc\031\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\001\002\000\030\005\uffce\006\uffce\013\uffce" +
    "\014\uffce\022\uffce\026\uffce\027\uffce\031\uffce\062\uffce\063" +
    "\uffce\064\uffce\001\002\000\020\010\130\025\121\033\115" +
    "\057\131\060\120\061\124\062\076\001\002\000\026\007" +
    "\uffb5\011\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\001\002\000\006\011\234\046" +
    "\235\001\002\000\026\007\uffb7\011\uffb7\037\224\040\232" +
    "\041\226\042\230\043\225\044\227\045\uffb7\046\uffb7\001" +
    "\002\000\012\007\uffb9\011\uffb9\045\222\046\uffb9\001\002" +
    "\000\020\010\130\025\121\033\115\057\131\060\120\061" +
    "\124\062\076\001\002\000\026\007\uffb8\011\uffb8\037\224" +
    "\040\232\041\226\042\230\043\225\044\227\045\uffb8\046" +
    "\uffb8\001\002\000\020\010\uffb4\025\uffb4\033\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\001\002\000\020\010\uffb0\025" +
    "\uffb0\033\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002" +
    "\000\020\010\uffb2\025\uffb2\033\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\001\002\000\020\010\uffaf\025\uffaf\033\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\001\002\000\020\010" +
    "\uffb1\025\uffb1\033\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\001\002\000\020\010\130\025\121\033\115\057\131\060" +
    "\120\061\124\062\076\001\002\000\020\010\uffb3\025\uffb3" +
    "\033\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\001\002\000" +
    "\026\007\uffb6\011\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\001\002\000\024\005" +
    "\075\013\105\014\107\022\112\026\074\027\077\031\110" +
    "\062\076\063\102\001\002\000\020\010\130\025\121\033" +
    "\115\057\131\060\120\061\124\062\076\001\002\000\012" +
    "\007\uffba\011\uffba\045\222\046\uffba\001\002\000\026\005" +
    "\uffd1\006\uffd1\013\uffd1\014\uffd1\022\uffd1\026\uffd1\027\uffd1" +
    "\031\uffd1\062\uffd1\063\uffd1\001\002\000\030\005\uffd3\006" +
    "\uffd3\013\uffd3\014\uffd3\022\uffd3\026\uffd3\027\uffd3\031\uffd3" +
    "\062\uffd3\063\uffd3\064\241\001\002\000\024\005\075\013" +
    "\105\014\107\022\112\026\074\027\077\031\110\062\076" +
    "\063\102\001\002\000\026\005\uffd0\006\uffd0\013\uffd0\014" +
    "\uffd0\022\uffd0\026\uffd0\027\uffd0\031\uffd0\062\uffd0\063\uffd0" +
    "\001\002\000\030\005\uffc6\006\uffc6\013\uffc6\014\uffc6\022" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\001\002\000\022\003\uff81\010\uff81\025\uff81\033\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\001\002\000\022\003\uff82" +
    "\010\uff82\025\uff82\033\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\001\002\000\022\003\256\010\uffc2\025\uffc2\033\uffc2" +
    "\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\022\003" +
    "\uff83\010\uff83\025\uff83\033\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\001\002\000\006\007\uffbe\011\uffbe\001\002\000" +
    "\006\007\uffbd\011\uffbd\001\002\000\022\010\130\011\uff98" +
    "\025\121\033\115\057\131\060\120\061\124\062\076\001" +
    "\002\000\004\011\254\001\002\000\006\007\uffbf\011\uffbf" +
    "\001\002\000\020\010\130\025\121\033\115\057\131\060" +
    "\120\061\124\062\076\001\002\000\006\007\uffc0\011\uffc0" +
    "\001\002\000\006\007\uffc1\011\uffc1\001\002\000\006\007" +
    "\uffc3\062\076\001\002\000\004\007\263\001\002\000\006" +
    "\007\uffc4\011\uffc4\001\002\000\022\007\uffbb\010\130\025" +
    "\121\033\115\057\131\060\120\061\124\062\076\001\002" +
    "\000\006\007\uffbc\046\235\001\002\000\004\007\266\001" +
    "\002\000\006\011\uffc3\062\076\001\002\000\004\011\270" +
    "\001\002\000\024\005\075\013\105\014\107\022\112\026" +
    "\074\027\077\031\110\062\076\063\102\001\002\000\026" +
    "\005\uffcf\006\uffcf\013\uffcf\014\uffcf\022\uffcf\026\uffcf\027" +
    "\uffcf\031\uffcf\062\uffcf\063\uffcf\001\002\000\030\005\uffcd" +
    "\006\uffcd\013\uffcd\014\uffcd\022\uffcd\026\uffcd\027\uffcd\031" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000\026\005\075" +
    "\006\274\013\105\014\107\022\112\026\074\027\077\031" +
    "\110\062\076\063\102\001\002\000\030\005\uffc5\006\uffc5" +
    "\013\uffc5\014\uffc5\022\uffc5\026\uffc5\027\uffc5\031\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\001\002\000\004\062\076\001\002" +
    "\000\010\011\277\020\uff94\056\164\001\002\000\004\007" +
    "\300\001\002\000\030\005\uffc9\006\uffc9\013\uffc9\014\uffc9" +
    "\022\uffc9\026\uffc9\027\uffc9\031\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\004\062\013\001\002\000\006\011\uffd8" +
    "\012\uffd8\001\002\000\010\011\ufff4\012\ufff4\020\305\001" +
    "\002\000\006\011\uffd6\012\uffd6\001\002\000\004\021\306" +
    "\001\002\000\012\003\ufff5\007\ufff5\011\ufff5\012\ufff5\001" +
    "\002\000\004\005\uffe5\001\002\000\012\006\311\017\uffdd" +
    "\032\051\062\uffdd\001\002\000\004\002\001\001\002\000" +
    "\012\003\ufff4\007\ufff4\012\ufff4\020\305\001\002\000\010" +
    "\003\ufff1\007\ufff1\012\ufff1\001\002\000\010\003\316\007" +
    "\317\012\315\001\002\000\004\062\320\001\002\000\010" +
    "\003\ufff2\007\ufff2\012\ufff2\001\002\000\016\003\ufff7\005" +
    "\ufff7\006\ufff7\023\ufff7\024\ufff7\062\ufff7\001\002\000\012" +
    "\003\ufff4\007\ufff4\012\ufff4\020\305\001\002\000\010\003" +
    "\ufff3\007\ufff3\012\ufff3\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\013\003\001\001\000\002\001\001\000" +
    "\004\061\006\001\001\000\002\001\001\000\004\022\007" +
    "\001\001\000\014\016\013\020\017\021\014\023\015\040" +
    "\010\001\001\000\002\001\001\000\004\014\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\022\001\001\000\004\031\024\001" +
    "\001\000\002\001\001\000\004\026\025\001\001\000\002" +
    "\001\001\000\004\031\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\040\001\001\000\004\040\306\001\001\000\002" +
    "\001\001\000\004\015\042\001\001\000\010\016\044\030" +
    "\045\040\010\001\001\000\004\014\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\052\037\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\054\044\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\060\001\001\000\002\001\001\000\012\033\064\040" +
    "\062\057\063\060\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\067\001\001\000\006\016\044\040\010\001\001\000\004" +
    "\065\071\001\001\000\004\024\072\001\001\000\014\002" +
    "\077\003\105\007\103\025\102\062\100\001\001\000\002" +
    "\001\001\000\004\024\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\051\244\054\243" +
    "\056\245\073\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\041\125\042\116\043\126\045\115\046\122\062" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\125\043\126\046\206\062\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\176\001" +
    "\001\000\004\073\161\001\001\000\004\067\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\133\001" +
    "\001\000\002\001\001\000\014\041\125\042\131\043\126" +
    "\046\122\062\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\142\054\134\055\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\146\062\121\001\001\000\002\001\001" +
    "\000\010\050\155\051\154\052\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\157\001\001\000\002\001" +
    "\001\000\010\041\160\043\126\062\121\001\001\000\004" +
    "\071\133\001\001\000\002\001\001\000\020\034\165\035" +
    "\167\041\125\042\166\043\126\046\122\062\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\041\125\042\171" +
    "\043\126\046\122\062\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\041\125\042\174\043\126\046\122" +
    "\062\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\177\001\001\000\002\001\001\000\014\041\125" +
    "\042\201\043\126\046\122\062\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\147\001\001\000\014\041" +
    "\125\042\210\043\126\046\122\062\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\220\005\216\006\217\041\125\042\215" +
    "\043\126\046\122\062\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\230\001\001\000\002\001\001" +
    "\000\016\006\222\041\125\042\215\043\126\046\122\062" +
    "\121\001\001\000\004\032\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\041\125\042\232\043\126\046\122" +
    "\062\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\077\003\237\007\103\025\236\062\100\001\001" +
    "\000\020\004\235\006\217\041\125\042\215\043\126\046" +
    "\122\062\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\241\003\242\007\103\062" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\252\035\167\041\125\042\166\043\126\046\122\062" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\041\125\042\256\043\126\046\122\062\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\261\011\260" +
    "\062\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\220\005\263\006\217\012\264\041\125\042\215" +
    "\043\126\046\122\062\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\261\011\266\062\100\001\001" +
    "\000\002\001\001\000\012\002\270\003\271\007\103\062" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\077\003\105\007\103\025\102\062\100\001\001\000" +
    "\002\001\001\000\004\062\275\001\001\000\004\073\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\062\060\301\001\001\000\002\001\001\000\004\047\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\052\037\053\001\001" +
    "\000\002\001\001\000\004\047\312\001\001\000\004\027" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\320\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	//if (s != null && s.value != null) 
		//logger.debug(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	int localVarsDefCount = 0;
	int globalVarsDefCount = 0;
	int globalConstsDefCount = 0;
	int globalVarsArrDeclCount = 0;
	
	boolean errorDetected = false;
	
	private final Logger logger = LogManager.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" Error na liniji ").append(((Symbol)info).left);
        logger.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" Info na liniji ").append(((Symbol)info).left);
        logger.info(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	
	boolean returnFound = false;
	public static final Struct boolType = new Struct(Struct.Bool);
	
	private static final int plusEqual = 0;
	private static final int minusEqual = 1;
	private static final int timesEqual = 2;
	private static final int splitEqual = 3;
	private static final int modEqual = 4;
	private static final int equal = 5;
	
	Struct initializingType;
	ArrayDeque<Struct> actualParams;
	private boolean arrayInit = false;
	private boolean leftSideFinished = false;
	Obj assignableObj;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	RESULT = mulop;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	RESULT = addop;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Assignop ::= EQUAL 
            {
              Integer RESULT =null;
		
			 	RESULT = equal;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		
			  	RESULT = Code.rem;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // MulopLeft ::= SPLIT 
            {
              Integer RESULT =null;
		
			  	RESULT = Code.div;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MulopLeft ::= TIMES 
            {
              Integer RESULT =null;
		
			  	RESULT = Code.mul;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MulopRight ::= REMND 
            {
              Integer RESULT =null;
		
			   		RESULT = modEqual;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MulopRight ::= DIV 
            {
              Integer RESULT =null;
		
			   		RESULT = splitEqual;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MulopRight ::= MUL 
            {
              Integer RESULT =null;
		
			   		RESULT = timesEqual;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Mulop ::= MulopLeft 
            {
              Integer RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	RESULT = mulop;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Mulop ::= MulopRight 
            {
              Integer RESULT =null;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	RESULT = mulop;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		
			  	RESULT = Code.sub;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		
			  	RESULT = Code.add;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AddopRight ::= SUB 
            {
              Integer RESULT =null;
		
			   		RESULT = minusEqual;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AddopRight ::= ADD 
            {
              Integer RESULT =null;
		
			   		RESULT = plusEqual;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Addop ::= AddopLeft 
            {
              Integer RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	RESULT = addop;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Addop ::= AddopRight 
            {
              Integer RESULT =null;
		int addopleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int addopright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer addop = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		  	RESULT = addop;
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj id = Tab.noObj;
					if(!name.equals("this")) {
						id = Tab.find(name);
						if(id != null) {
							DumpSymbolTableVisitor d = new DumpSymbolTableVisitor();
							d.visitObjNode(id);
							parser.report_info("Pretraga na " + nameleft + "(" + name + "), nadjeno " + d.getOutput(),null);
						}
						if(id == Tab.noObj) {
							parser.report_error("Greska na liniji " + nameleft + ": ime " + name + " nije deklarisano! ", null);
						}
					}
					RESULT = id;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= Designator NT$7 LBRCK Expr RBRCK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					RESULT = d;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$7 ::= 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					if(d != null && d != Tab.noObj) {
						Code.load(d);
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dg = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(dg != null && dg != Tab.noObj) {
						RESULT = Tab.noObj;
					} else {
						Obj obj = Tab.find(name);
						if(obj != null) {
							DumpSymbolTableVisitor d = new DumpSymbolTableVisitor();
							d.visitObjNode(obj);
							parser.report_info("Pretraga na " + nameleft + "(" + name + "), nadjeno " + d.getOutput(),null);
						}
						if(obj == Tab.noObj) {
							parser.report_error("Greska na liniji " + nameleft + ": ime " + name + " nije deklarisano! ", null);
						}
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActualParamList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
		   		if(Obj.Meth == func.getKind()) {
			   		parser.report_info("Pronadjen poziv funkcije " + func.getName() +  " na liniji " + funcleft, null);
			   		if(func.getType() == Tab.noType) {
			   			parser.report_error("Greska " + func.getName() +  " ne moze se koristiti u dodeli vrednosti!", null);
			   		}
			   		int destAdr = func.getAdr() - Code.pc;
			   		Code.put(Code.call);
			   		Code.put2(destAdr);
			   		RESULT = func.getType();
			   	} else {
			   		parser.report_error("Greska na liniji " + funcleft +  " ime  " + func.getName() + " nije funkcija!", null);
			   		RESULT = Tab.noType;
			   	}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
		   		if(d != null && d != Tab.noObj) {
			   		RESULT = d.getType();
			   		if(d.getType().getKind() != Struct.Array) {
			   			Code.load(d);
			   		}
			   		if(d.getKind() == Obj.Var && !leftSideFinished) {
				   		assignableObj = d;
			   		}
		   		} else {
		   			RESULT = new Struct(Struct.None);
		   		}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		   		RESULT = e;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= NEW Type BracketsExpr 
            {
              Struct RESULT =null;
		
		   		Code.put(Code.newarray);
		   		int b;
		   		if( initializingType == Tab.charType ) {
		   			b = 0;
		   		} else {
		   			b = 1;
		   		}
		   		
		   		arrayInit = true;
		   		Code.put(b);
		   		RESULT = new Struct(Struct.Array, initializingType);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		Obj o = Tab.insert(Obj.Con, "", boolType);
		   		int boolVal;
		   		if(b) {
		   			boolVal = 1;
		   		} else {
		   			boolVal = 0;
		   		}
		   		o.setAdr(boolVal);
		   		Code.load(o);
		   		RESULT = boolType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		Obj o = Tab.insert(Obj.Con, "", Tab.charType);
		   		o.setAdr(c);
		   		Code.load(o);
		   		RESULT = Tab.charType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			    Obj o = Tab.insert(Obj.Con, "", Tab.intType);
			    o.setAdr(i.intValue());
			    Code.load(o);
			    RESULT = Tab.intType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term NT$5 Mulop NT$6 Factor 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	if(t != null) {
			 	leftSideFinished = true;
			 	Struct tType = t; 
			 	
			 	if(tType.getKind() == Struct.Array) {
				  	tType = tType.getElemType();
				} 
				
				if(f.getKind() == Struct.Array) {
					f = f.getElemType();
					if(f.getKind() == Struct.Char) {
						Code.put(Code.baload);
					} else if(f.getKind() == Struct.Int) {
						Code.put(Code.aload);
					}
				}
			 	
			 	if(tType.equals(f) && tType == Tab.intType) {
			 		if(op == Code.mul || op == Code.div || op == Code.rem ) {
							Code.put(op);
					} else if(op == timesEqual || op == splitEqual || op == modEqual) {
			 			switch(op) {
			 				case timesEqual:
			 					Code.put(Code.mul);
			 					break;
			 				case splitEqual:
			 					Code.put(Code.div);
			 					break;
			 				case modEqual:
			 					Code.put(Code.rem);
			 					break;
			 			}
			 			
			 			if(t.getKind() == Struct.Array) {
			 				Code.put(Code.dup_x2);
				  			if(tType.getKind() == Struct.Int) {
				  				Code.put(Code.astore);
				  			} else if(tType.getKind() == Struct.Char) {
				  				Code.put(Code.bastore);
				  			}
				  		} else {
				  			Code.store(assignableObj);
				  			Code.load(assignableObj);
				  		}
			 		}
			 	}
			 	
			 	if(t.getKind() == Struct.Array) {
			 		RESULT = t.getElemType();
			 	} else {
			 		RESULT = t;
			 	}
		 	} else {
		 		RESULT = null;
		 	}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$6 ::= 
            {
              Struct RESULT =(Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		 	if(t != null) {
			 	Struct tType = t;
				  				
				if(tType.getKind() == Struct.Array) {
					tType = tType.getElemType();
				}
							
				if(tType.getKind() == Struct.Int && op >= plusEqual && op < equal && t.getKind() == Struct.Array) {
				  	Code.put(Code.dup2);
				  	Code.put(Code.aload);
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$5 ::= 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 leftSideFinished = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BracketsExpr ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsExpr",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BracketsExpr ::= LBRCK Expr RBRCK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsExpr",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PositiveExpr ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PositiveExpr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PositiveExpr ::= PositiveExpr NT$3 Addop NT$4 Term 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct pe = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(pe != null) {
				leftSideFinished = true;
				Struct peType = pe;  		
						
				if(peType.getKind() == Struct.Array) {
				  	peType = peType.getElemType();
				}
				
				if(t.getKind() == Struct.Array) {
					t = t.getElemType();
					if(t.getKind() == Struct.Char) {
						Code.put(Code.baload);
					} else if(t.getKind() == Struct.Int) {
						Code.put(Code.aload);
					}
				}
				
				if(peType.equals(t) && peType == Tab.intType) {
					if(op == Code.add || op == Code.sub) {
							Code.put(op);
					} else if( op == plusEqual || op == minusEqual) {
						switch(op) {
				  			case plusEqual:
				  				Code.put(Code.add); 
				  				break;
							case minusEqual:
								Code.put(Code.sub); 
								break;		
					 	}
					 	
					 	if(pe.getKind() == Struct.Array) {
				  			Code.put(Code.dup_x2);
				  			if(peType.getKind() == Struct.Int) {
				  				Code.put(Code.astore);
				  			} else if(peType.getKind() == Struct.Char) {
				  				Code.put(Code.bastore);
				  			}
				  		} else {
				  			Code.store(assignableObj);
				  			Code.load(assignableObj);
				  		}
					}
					
					if(pe.getKind() == Struct.Array) {
			 			RESULT = pe.getElemType();
			 		} else {
			 			RESULT = pe;
			 		}
				} else {
					parser.report_error("Greska na liniji " + peleft + " : nekompatibilni tipovi u izrazu za sabiranje", null);
					RESULT = Tab.noType;
				}
			} else {
				RESULT = null;
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PositiveExpr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$4 ::= 
            {
              Struct RESULT =(Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct pe = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		 	if(pe != null) {
			 	Struct peType = pe;
				  				
				if(peType.getKind() == Struct.Array) {
					peType = peType.getElemType();
				}
							
				if(peType.getKind() == Struct.Int && pe.getKind() == Struct.Array) {
				  	Code.put(Code.dup2);
				  	Code.put(Code.aload);
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$3 ::= 
            {
              Struct RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct pe = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 leftSideFinished = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= PositiveExpr 
            {
              Struct RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct pe = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT = pe;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= MINUS PositiveExpr 
            {
              Struct RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct pe = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	if(pe != null) {
		 		Code.put(Code.neg);
		 	}
		 	RESULT = pe;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PrintExpr ::= Expr COMMA NUMBER 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			  	RESULT = t;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExpr",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PrintExpr ::= Expr 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = t;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintExpr",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Relop ::= LE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Relop ::= LS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Relop ::= GE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Relop ::= GT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Relop ::= NE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondFact ::= CondFact Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ConditionOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOptional",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ConditionOptional ::= Condition 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionOptional",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatement ::= Designator DEC 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			   				if(dest != null && dest != Tab.noObj) {
				   				Struct destType = dest.getType();
				  				
				  				if(destType.getKind() == Struct.Array) {
				  					destType = destType.getElemType();
				  				}
				  				
				  				if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Char || destType.getKind() == Struct.Bool) {
				  					Code.load(dest);
					   				Code.loadConst(1);
					   				Code.put(Code.sub);
					   				Code.store(dest);
				  				} else {
				  					parser.report_error("Greska na liniji " + destleft + " : sa leve strane izraza nije promenljiva ili elemnt niza", null);
				  				}
			  				}
			   			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DesignatorStatement ::= Designator INC 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			   				if(dest != null && dest != Tab.noObj) {
				   				Struct destType = dest.getType();
				  				
				  				if(destType.getKind() == Struct.Array) {
				  					destType = destType.getElemType();
				  				}
				  				
				  				if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Char || destType.getKind() == Struct.Bool) {
				  					Code.load(dest);
				   					Code.loadConst(1);
				   					Code.put(Code.add);
				   					Code.store(dest);
				  				} else {
				  					parser.report_error("Greska na liniji " + destleft + " : sa leve strane izraza nije promenljiva ili elemnt niza", null);
				  				}
			  				}
			   			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DesignatorStatement ::= Designator LPAREN ActualPars RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
			  				if(func != null) {
				  				if(Obj.Meth == func.getKind()) {
				   					parser.report_info("Pronadjen poziv funkcije " + func.getName() +  " na liniji " + funcleft, null);
				   					RESULT = func.getType();
				   		
				   					int destAdr = func.getAdr() - Code.pc;
				   					Code.put(Code.call);
				   					Code.put2(destAdr);
				   					if(func.getType() != Tab.noType) {
				   						Code.put(Code.pop);
				   					}
				   				} else {
				   					parser.report_error("Greska na liniji " + funcleft +  " ime  " + func.getName() + " nije funkcija!", null);
				   					RESULT = Tab.noType;
				   				}
			   				} else {
			   					parser.report_error("Nepoznat poziv", null);
				   				RESULT = Tab.noType;
			   				}
			   			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DesignatorStatement ::= Designator Assignop error 
            {
              Object RESULT =null;
		
			  			System.out.println("Uspesan oporavak od greske pri dodeli vrednosti."); 
			  			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DesignatorStatement ::= Designator Assignop NT$2 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  				if(dest != null && e != null) {
				  				Struct destType = dest.getType();
				  				
				  				if(destType.getKind() == Struct.Array) {
				  					destType = destType.getElemType();
				  				}
				  				
				  				if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Char || destType.getKind() == Struct.Bool) {
					  				//if array then aload or baload
					  				boolean exprArray = false;
					  				if(e.getKind() == Struct.Array) {
					  					e = e.getElemType();
					  					if(!arrayInit) {
						  					if(e.getKind() == Struct.Char) {
						  						Code.put(Code.baload);
						  					} else if(e.getKind() == Struct.Int || e.getKind() == Struct.Bool) {
						  						Code.put(Code.aload);
						  					}
					  					} else {
					  						arrayInit = false;
					  						exprArray = true;
					  					}
					  				}
					  				
					  				if(!e.assignableTo(destType)) {
					  					parser.report_error("Greska na liniji " + destleft + " : nekompatibilni tipovi u izrazu za dodelu: " + e.getKind() + " and " + dest.getType().getKind(), null);
					  				} else {
					  				
					  					switch(op) {
					  						case plusEqual:
					  							Code.put(Code.add); 
					  							break;
											case minusEqual:
												Code.put(Code.sub); 
												break;
											case timesEqual:
												Code.put(Code.mul); 
												break;
											case splitEqual:
												Code.put(Code.div); 
												break;
											case modEqual:
												Code.put(Code.rem); 
												break;
					  					}
					  					if(dest.getType().getKind() == Struct.Array && !exprArray) {
					  						if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Bool) {
					  							Code.put(Code.astore);
					  						} else if(destType.getKind() == Struct.Char) {
					  							Code.put(Code.bastore);
					  						}
					  					} else {
					  						Code.store(dest);
					  						arrayInit = false;
					  					}
					  				}
					  			} else {
					  				parser.report_error("Greska na liniji " + destleft + " : sa leve strane izraza nije promenljiva ili elemnt niza", null);
					  			}
				  			}
			  			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$2 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

							if(dest != null && dest != Tab.noObj) {
								Struct destType = dest.getType();
				  				
				  				if(destType.getKind() == Struct.Array) {
				  					destType = destType.getElemType();
				  				}
							
								if(destType.getKind() == Struct.Int && op >= plusEqual && op < equal) {
									if(dest.getType().getKind() == Struct.Array) {
				  						Code.put(Code.dup2);
				  						Code.put(Code.aload);
				  					} else {
				  						Code.load(dest);
				  					}
				  				}
			  				}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DesignatorStatementOptional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptional",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DesignatorStatementOptional ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOptional",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		
			  	//open scope
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matched ::= RETURN PrintExpr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			  	returnFound = true;
			  	Struct currMethType = currentMethod.getType();
			  	if(!currMethType.compatibleWith(t)) {
			  		parser.report_error("Greska na liniji " + tleft + " : tip izraza u return ne slaze se sa tipom povratne funkcije " + currentMethod.getName(), null);
			  	}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj dest = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			  	if(dest != null) {
				  	Struct destType = dest.getType();
				  				
				  	if(destType.getKind() == Struct.Array) {
				  		destType = destType.getElemType();
				  	}
				  				
				  	if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Char || destType.getKind() == Struct.Bool) {
				  		Code.put(Code.read);
				  		if(destType.getKind() == Struct.Char) {
				  			Code.put(Code.bastore);
				  		} else if(destType.getKind() == Struct.Int || destType.getKind() == Struct.Bool) {
				  			Code.put(Code.astore);
				  		}
				  	} else {
				  		parser.report_error("Greska na liniji " + destleft + " : elemnt prosledjen u funkciju read nije promenljiva ili elemnt niza tipa int, char ili bool", null);
				  	}
			  	}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= CONT SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			  	parser.printCallCount++;
			  	if(t.getKind() == Struct.Array) {
			  		t = t.getElemType();
			  		if(t.getKind() == Struct.Char) {
				  		Code.put(Code.baload);
				  	} else if(t.getKind() == Struct.Int || t.getKind() == Struct.Bool) {
				  		Code.put(Code.aload);
				  	}
			  	} 
			  	
			  	if(t != Tab.intType && t != Tab.charType && t != boolType) {
			  		parser.report_error("Greska na liniji " + tleft + ": Operand instrukcije PRINT mora biti bool, char ili int tipa", null);
			  	} else {
				  	if(t == Tab.intType || t == boolType) {
				  		Code.loadConst(5);
				  		Code.put(Code.print);
				  	}
				  	
				  	if(t == Tab.charType) {
				  		Code.loadConst(1);
				  		Code.put(Code.bprint);
				  	}
			  	}
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= FOR LPAREN DesignatorStatementOptional SEMI ConditionOptional SEMI DesignatorStatementOptional RPAREN Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= DesignatorStatement SEMI 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			  	RESULT = ds;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Unmatched ::= FOR LPAREN DesignatorStatementOptional SEMI ConditionOptional SEMI DesignatorStatementOptional RPAREN Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParamDecl ::= Type IDENT Brackets 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int brckleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int brckright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct brck = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(brck != null) {
							Tab.insert(Obj.Var, var, new Struct(Struct.Array, initializingType));
						} else {
							Tab.insert(Obj.Var, var, initializingType);
						}
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParamList ::= FormalParamDecl 
            {
              Integer RESULT =null;
		
						RESULT = 1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
						RESULT = f + 1;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormPars ::= 
            {
              Object RESULT =null;
		
			 	RESULT = 0;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	RESULT = f;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
			      RESULT = Tab.noType;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		
			   	  RESULT = initializingType;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // StaticMeth ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticMeth",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StaticMeth ::= STATIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticMeth",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDecl ::= StaticMeth ReturnType IDENT NT$0 LPAREN FormPars RPAREN VarsDeclList LBRACE NT$1 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		
					if(!returnFound && retType != Tab.noType) {
						parser.report_error("Semanticka greska na liniji " + methNameleft + " : funkcija " + methName + " nema return iskaz! ", null);
					}
					
					Code.put(Code.exit);
					Code.put(Code.return_);
					
					Tab.chainLocalSymbols(currentMethod);
					Tab.closeScope();
					
					returnFound = false;
					currentMethod = null;
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

					  
					currentMethod.setAdr(Code.pc);
					if("main".equals(methName)) {
						Code.mainPc = currentMethod.getAdr();
					}
					Code.put(Code.enter);
					// how many arguments line
					Code.put(currentMethod.getLevel());
					// total number of arguments and local variables
					Code.put(Tab.currentScope().getnVars());
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$0 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

					currentMethod = Tab.insert(Obj.Meth, methName, retType);
					parser.report_info("Obradjuje se funkcija " + methName + " na liniji " + methNameleft, null);
					Tab.openScope();
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inheritance ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Inheritance",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inheritance ::= EXT Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Inheritance",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassMethods ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassMethods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDecl ::= CLASS IDENT Inheritance LBRACE VarsDeclList ClassMethods RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constants ::= BOOL 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = new Obj(Obj.Con, "", boolType);
			  	int val;
			  	if(b) {
			  		val = 1;
			  	} else {
			  		val = 0;
			  	}
			  	
			  	RESULT.setAdr(val);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constants",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constants ::= CHAR 
            {
              Obj RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = new Obj(Obj.Con, "", Tab.charType);
			  	RESULT.setAdr(ch);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constants",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constants ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = new Obj(Obj.Con, "", Tab.intType);
			  	RESULT.setAdr(num.intValue());
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constants",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstantInit ::= IDENT EQUAL Constants 
            {
              Object RESULT =null;
		int conNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int conNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String conName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj con = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				 	if(Tab.currentScope.findSymbol(conName) != null) {
				  		parser.report_error("GRESK! Identifikator " + conName + " se vec nalazi u tabeli simbola", null);
				  	}
				  	else {
				  		Obj constantObject = Tab.insert(Obj.Con, conName, initializingType);
				  		parser.report_info("Deklarisana konstanta " + conName + " na liniji " + conNameleft, null);
				  		
				  		if(con.getType() != initializingType) {
				  			parser.report_error("GRESKA! Na liniji: " + conleft + " Tip: " + constantObject.getType() + "nije tipa " + initializingType, null);
				  		} else {
				  			constantObject.setAdr(con.getAdr());
				  			parser.globalConstsDefCount++;
				  		}
					}
				 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantInit",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstantsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantsList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstantsList ::= ConstantsList COMMA ConstantInit 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstantsList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDecl ::= CONST Type ConstantInit ConstantsList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Obj typeNode = Tab.find(typeName);
			if(typeNode == Tab.noObj) {
				 parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
				 initializingType = Tab.noType;
			} else {
				if (Obj.Type == typeNode.getKind()) {
					initializingType = typeNode.getType();
				} else {
					parser.report_error("Greska na liniji " + typeNameleft + ": Ime " + typeName + " ne predstavlja tip", typeNode);
					initializingType = Tab.noType;
				}
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarsList ::= VarsList error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(currentMethod == null)
					parser.report_info("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive", null); 
				else
					parser.report_info("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenljive", null); 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarsList ::= VarsList COMMA IDENT Brackets 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int brckleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int brckright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct brck = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	Obj temp = Tab.find(varName);
				boolean alreadyExists = false;
				if(temp != Tab.noObj && (Tab.currentScope != null &&
					Tab.currentScope.getLocals() != null &&
					Tab.currentScope.getLocals().searchKey(varName) != null)) {
						alreadyExists = true;	
				}
				if(!alreadyExists) {
					if(brck != null) {
						Obj inserted = Tab.insert(Obj.Var, varName, new Struct(Struct.Array, initializingType));
						if( currentMethod != null && "main".equals(currentMethod.getName())) {
							parser.localVarsDefCount++;
						} else if (inserted.getLevel() == 0) {
							parser.globalVarsArrDeclCount++;
							Code.dataSize++;
						}
					} else {
						Obj inserted = Tab.insert(Obj.Var, varName, initializingType);
						if( currentMethod != null && "main".equals(currentMethod.getName())) {
							parser.localVarsDefCount++;
						} else if (inserted.getLevel() == 0) {
							parser.globalVarsDefCount++;
							Code.dataSize++;
						}
					}
					parser.report_info("Deklarisana promenljiva " + varName + " na liniji " + varNameleft, null);
				} else {
					parser.report_error("Promenljiva "+ varName+" na liniji "+ varNameleft+ " je vec definisana za trenutni scope!", null);
				}
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Brackets ::= 
            {
              Struct RESULT =null;
		
			 	RESULT = null;
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Brackets",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Brackets ::= LBRCK RBRCK 
            {
              Struct RESULT =null;
		
			 	RESULT = new Struct(Struct.Array);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Brackets",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(currentMethod == null)
					parser.report_info("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju globalne promenljive", null); 
				else
					parser.report_info("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenljive", null); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type IDENT Brackets VarsList SEMI 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int brckleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int brckright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct brck = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				Obj temp = Tab.find(varName);
				boolean alreadyExists = false;
				if(temp != Tab.noObj && (Tab.currentScope != null &&
					Tab.currentScope.getLocals() != null &&
					Tab.currentScope.getLocals().searchKey(varName) != null)) {
						alreadyExists = true;	
				}
				if(!alreadyExists) {
					if(brck != null) {
						Obj inserted = Tab.insert(Obj.Var, varName, new Struct(Struct.Array, initializingType));
						if( currentMethod != null && "main".equals(currentMethod.getName())) {
							parser.localVarsDefCount++;
						} else if (inserted.getLevel() == 0) {
							parser.globalVarsArrDeclCount++;
							Code.dataSize++;
						}
					} else {
						Obj inserted = Tab.insert(Obj.Var, varName, initializingType);
						if( currentMethod != null && "main".equals(currentMethod.getName())) {
							parser.localVarsDefCount++;
						} else if (inserted.getLevel() == 0) {
							parser.globalVarsDefCount++;
							Code.dataSize++;
						}
					}
					parser.report_info("Deklarisana promenljiva " + varName + " na liniji " + varNameleft, null);
				} else {
					parser.report_error("Promenljiva "+ varName+" na liniji "+ varNameleft+ " je vec definisana za trenutni scope!", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsDeclList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsDeclList ::= VarsDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarsDeclList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declarations ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declarations",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declarations ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declarations",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declarations ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declarations",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationsList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationsList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclarationsList ::= DeclarationsList Declarations 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationsList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
 	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
 	Tab.openScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName DeclarationsList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Code.dataSize = Tab.currentScope().getnVars();
	
	Tab.chainLocalSymbols(p);
	Tab.closeScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

